
// some test stuff to see what the falcon bindings can do
> "-- Setting up test Level --"
Music.Stop()
Engine.LoadLevel("testlevel.txt") // TODO: deprecate

EngineMap.CreateInfoLayer() // TODO: deprecate?

EngineMap.GetLayer(2).SetCollisionEnabled(false); // layer 2 for background
EngineMap.GetLayer(3).SetCollisionEnabled(false); // layer 3: buttons and other objects behind olaf
EngineMap.GetLayer(4).SetCollisionEnabled(false); // layer 4: olaf himself
EngineMap.GetLayer(5).SetCollisionEnabled(false); // layer 5: sprite overlay
EngineMap.GetLayer(6).SetCollisionEnabled(true); // layer 6: for solid wall (fixed for ASCII maps)
EngineMap.GetLayer(7).SetCollisionEnabled(false); // layer 7 is for animated tiles (fixed for ASCII maps)

InitialMapSetup()
> "-- Created & set up info layer --"


// at this point, the ASCII level loader already populated the layers with tiles, create & update the collision map
EngineMap.UpdateCollisionMap()
> "-- Calculated collision map --"

// set game constants
Physics.SetGravity(300)


// create olaf character for testing
olaf = Olaf()
olaf.SetLayerId(4)
olaf.SetPos(72,48)
olaf.canDebugJump = true

/*if not IsEditor()
    RegisterUpdateHook( [CenterView, olaf] ) // defined in package.fal
end*/
        
img = ImageObject("sprites/lv3logo.png")
CallScheduler.Schedule(img.remove, 4000)

blk = IronBlock()
blk.SetPos(424,36)

blk2 = IronBlock()
blk2.SetPos(356,38)

blk3 = IronBlock()
blk3.SetPos(442,245)

blk4 = IronBlock()
blk4.SetPos(495,299)

blk5 = IronBlock()
blk5.SetPos(536,320)



function DoSomeResets(who, k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        who.SetPos(64,48)
        GC.perform(true)
        return true // drop the event 
    end
end

RegisterRawInputHook( .[DoSomeResets olaf SDLK.TAB] )
RegisterRawInputHook( .[DisableInputOn SDLK.END])
RegisterRawInputHook( .[CycleGravityOn SDLK.PAGEDOWN])
RegisterRawInputHook( .[ToggleBounceOn olaf SDLK.PAGEUP])
RegisterRawInputHook( .[ToggleGodmode olaf SDLK.COMMA])
RegisterRawInputHook( .[ResetBlockTest blk SDLK.m])
//RegisterRawInputHook("RemovePlayerTest", .[RemovePlayerTest olaf SDLK.q])
PlayerAliveCheck(olaf)

/*function RemovePlayerTest(who, k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        olaf.remove()
        GC.perform(true)
    end
end*/

function ResetBlockTest(who, k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        who.SetPos(422,36)
        return true // drop the event 
    end
end

function DisableInputOn(k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        SNESKeyMap.disabled = not SNESKeyMap.disabled
        > "SNESKeyMap: ", (SNESKeyMap.disabled ? "disabled" : "enabled")
    end
end

function CycleGravityOn(k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        CycleGravity()
        > "Gravity is now: ", Physics.GetGravity()
    end
end

function ToggleBounceOn(who, k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        p = who.phys
        p.dbounce = p.dbounce ? 0 : 0.6
        > who, " bounce is now: ", p.dbounce
    end
end

function ToggleGodmode(who, k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        who.godmode = not who.godmode
        Sound( who.godmode ? "menuaccept.ogg" : "blockbreak.ogg" ).Play()
        > "God mode ", ( who.godmode ? "ON" : "OFF" )
        return true // drop the event 
    end
end

function CycleGravity()
    switch Physics.GetGravity()
        case 300
            Physics.SetGravity(60)
            Sound("use.ogg").Play()
        case 60
            Physics.SetGravity(-80)
            Sound("windup.ogg").Play()
        default
            Physics.SetGravity(300)
            Sound("blockbreak.ogg").Play()
    end
end



enum TFlag
    NONE    = 0x0000
    ELECTRO = 0x0001
    BREAK   = 0x0002
end


function InitialMapSetup()
    breakable = nil //Tile("misc/breakable.png")
    trigger = nil //Tile("misc/trigger.png")
    redcross = nil //Tile("misc/noimage.png")
    EN_cons = [EnergyLine, false]
    EN_V_cons = [EnergyLine, true]
    
tileInfoSetup = [
    //   filename              =>  [flag to set, overlay to place, object to spawn,          special ID, object: layerId]
    "sprites/en.anim"          => .[TFlag.NONE       trigger      EN_cons,                   2           5],
    "sprites/en_v.anim"        => .[TFlag.NONE       trigger      EN_V_cons,                 2           5],
    "sprites/enx.anim"         => .[TFlag.ELECTRO    redcross     EN_cons                    3           5],
    "sprites/greyblock.png"    => .[TFlag.BREAK      breakable    nil                        0           nil],
    "sprites/bomb.png"         => .[TFlag.NONE       nil          BombObject                 0           3],
    "sprites/button.png"       => .[TFlag.NONE       nil          Button                     1           3],
    "sprites/leverdown.png"    => .[TFlag.NONE       nil          Lever                      0           3]
]

buttonActions = .[
            BA_KillEn1
            BA_KillEn2
            BA_KillGreyBlocks1
            ,[RandomizeTest, true]
            ,[RandomizeTest, false]
        ]
        
    buttonCounter = 0
    
    d = EngineMap.GetLayerSize() - 1
    for ly in [EngineMap.GetLayer(6), EngineMap.GetLayer(7)]
        for y = 0 to d
            for x = 0 to d
                t = ly.GetTile(x,y)
                if(t and (t.filename in tileInfoSetup) )
                    flag, overlay, objcons, special, layerId = tileInfoSetup[t.filename]
                    EngineMap.SetTileInfo(x,y, flag)
                    if overlay: EngineMap.GetLayer(8).SetTile(x,y,overlay)
                    if isCallable(objcons)
                        xpos = x * 16
                        ypos = y * 16
                        obj = objcons()
                        obj.SetPos(xpos,ypos) // set new object in place
                        obj.SetLayerId(layerId) // put it on target layer
                        if special != 3: ly.SetTile(x,y,nil) // and remove the static tile
                        switch special
                            case 1 // button
                                if buttonCounter < len(buttonActions)
                                    obj.SetOnPush(buttonActions[buttonCounter])
                                    buttonCounter++
                                end
                            case 2 // energy line
                                obj.AdjustPosition()
                            case 3
                                obj.SetSprite(nil)
                        end
                    end
                end
            end
        end
    end
end

function BA_KillEn1(who, trigger)
    trigger.SetOnPush(nil)
    RemoveAllEnergyLinesIn(378,69,256,130)
end

function BA_KillEn2(who, trigger)
    trigger.SetOnPush(nil)
    RemoveAllEnergyLinesIn(48,96,160,150)
end
    
function BA_KillGreyBlocks1(who, trigger)
    trigger.SetOnPush(nil)
    PlaySoundMulti("blockbreak.ogg", 3, 60)
    ly = EngineMap.GetLayer(6) // solid tile layer
    ly2 = EngineMap.GetLayer(2) // background layer
    blk = Tile("ship/broken.png")
    for x = 9 to 11
        for y = 5 to 6
            ly.SetTile(x,y,nil)
            ly2.SetTile(x,y,blk, false)
        end
    end
    for x = 10 to 11
        for y = 10 to 11
            ly.SetTile(x,y,nil)
            ly2.SetTile(x,y,blk, false)
        end
    end
end

function RemoveAllEnergyLinesIn(x,y,w,h)
    arr = Objects.GetAllInRect(x,y,w,h)
    for obj in arr
        select obj
            case EnergyLine
                tile = obj.GetSprite()
                if tile: tile.name = "swoff"
                CallScheduler.Schedule( obj.remove, 2000 )
        end
    end
end

function PlaySoundMulti(file, times, offs)
    sound = Sound(file)
    if not sound: return
    for i = 1 to times
        CallScheduler.Schedule( sound.Play, i * offs )
    end
end

function RandomizeTest(fill)
    Sound("menuaccept.ogg").Play()
    tiles = (not fill) ? nil : .[
        Tile("sprites/greyblock.png")
        Tile("sprites/door1.png")
        Tile("sprites/erikhead.png")
        Tile("sprites/lockred.png")
        Tile("sprites/target.png")
        Tile("sprites/outlet1.png")
        Tile("sprites/outlet3.png")
        Tile("ship/girder1.png")
        Tile("ship/broken.png")
        Tile("ship/girder1.png")
        Tile("ship/block1.png")
    ]
    ly = EngineMap.GetLayer(5)
    for y = 28 to 37
        for x = 0 to 62
            ly.SetTile(x,y,fill ? randomPick(tiles) : nil,false)
        end
    end
end

function PlayerAliveCheck(who)
    if (not who.valid) or (who.dead and who.GetSprite().name == "invis")
        img = ImageObject("misc/fail.png")
        img.SetPos(100,100)
        Sound("klaxonloop.ogg").Play()
    else
        CallScheduler.Schedule( [PlayerAliveCheck, who], 1500)
    end
end



// open a menu. so far only controllable via console.
// this is just here to check IF something works
//OpenMenu(MainMenu) // THIS CONFLICTS WITH OTHER KEYBOARD INPUT!!

// replace energy streams after 3 secs
//CallScheduler.Schedule( ReplaceEnergyStreams, 3000)

// fill screen after 6 secs have passed
//CallScheduler.Schedule( FillScreenWithWater, 6000)

// replace all blue energy lines with green ones
function ReplaceEnergyStreams()
    dim = EngineMap.GetLayerSize()
    enx = Tile("sprites/enx.anim")
    en  = Tile("sprites/en.anim")
    for ly in [EngineMap.GetLayer(6), EngineMap.GetLayer(7)]
        for y = 0 to dim - 1
            for x = 0 to dim - 1
                t = ly.GetTile(x,y)
                if(t)        
                    if(t.filename == "sprites/en.anim")
                        ly.SetTile(x,y,enx)
                    elif(t.filename == "sprites/enx.anim")
                        ly.SetTile(x,y,en)
                    end
                end
            end
        end
    end
end



function FillScreenWithWater()
    layer = EngineMap.GetLayer(8)
    dim = layer.GetArraySize()
    tile = Tile("water/waterfull.png")
    if(layer and tile)
        for y = 0 to dim - 1
            for x = 0 to dim - 1
                layer.SetTile(x,y,tile)
            end
            CallScheduler.Schedule( [DrainWaterRow, y], y * 1200)
        end
    end
end

// completely delete the transparent tiles after the water was drained, row-wise
function DeleteWaterRow(y)
    layer = EngineMap.GetLayer(8)
    dim = layer.GetArraySize()
    for x = 0 to dim - 1
        layer.SetTile(x,y,nil)
    end
end

function DrainWaterRow(y)
    tile = Tile("water/water_test.anim")
    if(tile.type == TILETYPE_ANIMATED) // just to be sure
        tile.name = "sink" // toggle animation
        tile.frame = 0 // and start it
    end
    layer = EngineMap.GetLayer(8)
    dim = layer.GetArraySize()
    // place the tile along the whole row
    for x = 0 to dim - 1
        layer.SetTile(x,y,tile)
    end
    // cleanup after the row was drained
    CallScheduler.Schedule( [DeleteWaterRow, y], 1200)
end

GC.perform(true)
> "-- Level setup complete --"

