/* speeds:
  0 - handled by engine (gravity)
  1 - own speed (mostly X axis only unless climbing a ladder)
  2 - speed from external source
*/

VDOWN = Vector(0,1)

class PlayerEx from SNESControlledPlayer
    
    gfx = nil
    gfxOffs = nil
    walkSpeed = 64
    climbSpeed = 64 // NYI
    fallSpeed = 256
    raiseSpeed = 32 // NYI
    facingDir = DIRECTION_RIGHT
    movingDir = DIRECTION_NONE
    idle = true // true if this player is just standing there, doing nothing
    dead = false // dead means can't move
    godmode = false // invincible
    canDebugJump = false
    
    actionHandler = nil
    
    init
        self.SetBBox(0,0,32,32)
        if self.gfx
            tile = self.SetSprite(self.gfx)
            if tile and tile.type == TILETYPE_ANIMATED: tile.name = "standR"
        end
        
        // init physics
        self.mass = 100
        /*
        p = self.phys // note that p is a reference automatically, and all fields initialized with 0
        p.weight = 70 // to have some default value
        p.xspeed = 0
        p.yspeed = 0
        p.xmaxspeed = self.walkSpeed  * 2 // do we really need a limit here?
        p.ymaxspeed = self.fallSpeed
        p.xaccel = 0
        p.yaccel = 0
        p.xfriction = 0
        p.yfriction = 0
        p.ubounce = 0.2 // when hitting with head against wall, we bounce back a little (see LV1 "anti-gravity" field in ship)
        */
        self.SetAffectedByPhysics(true)

        
    end
    
    function OnUpdate(ms)
        if self.dead: return
        
        switch self.movingDir
            case DIRECTION_LEFT
                self.SetSpeed(-self.walkSpeed, nil)
                
            case DIRECTION_RIGHT
                self.SetSpeed(self.walkSpeed, nil)
                
            case DIRECTION_NONE
                self.SetSpeed(0, nil)
                
            // TODO: ladder climbing
        end
        
        self.UpdateAnim()
    end
    
    function CanMoveToDir(d)
        v = DirectionToVector(d)
        return v and not self.CastRay(v)
    end
    
    function CanFallDown() // TODO: ladder climbing etc
        global VDOWN
        d = self.CastRay(VDOWN)  // if it returns nil, there is still space left (checking 1 pixel row only!)
        //> "can fall: ", d
        return not d
    end
    
    function UpdateAnim()
        if self.CanFallDown()
            self.AnimFall()
        elif self.movingDir != DIRECTION_NONE // TODO: add up/down (ladder movemen)
            if self.CanMoveToDir(self.movingDir)
                self.AnimWalk()
            else
                self.AnimPush()
            end
        else
            self.AnimStand()
        end
    end
    
    function SetWalking(d)
        > "SetWalking ", d
        switch d
            case DIRECTION_LEFT
                self.facingDir = DIRECTION_LEFT
            
            case DIRECTION_RIGHT
                self.facingDir = DIRECTION_RIGHT
        end
        self.movingDir = d
    end
    
    function OnKeyLeft(pressed)
        if pressed
            self.SetWalking(DIRECTION_LEFT)
        else
            if(self.movingDir == DIRECTION_LEFT) // already moving in opposite direction?
                self.SetWalking(DIRECTION_NONE)
            end
        end
    end
    
    function OnKeyRight(pressed)
        if pressed
            self.SetWalking(DIRECTION_RIGHT)
        else
            if(self.movingDir == DIRECTION_RIGHT) // already moving in opposite direction?
                self.SetWalking(DIRECTION_NONE)
            end
        end
    end
    
    // --DEBUG JUMP--
    function OnKeyUp(pressed)
        if pressed and self.canDebugJump: self.AddSpeed(nil, -128)
    end
    
    function OnKeyDown(pressed)
    end
    
    function OnKeyA(pressed)
        if self.actionHandler: self.actionHandler(self, pressed)
    end
    
    function OnKeyB(pressed)
    end
    
    function OnKeyX(pressed)
    end
    
    function OnKeyY(pressed)
    end
    
    function IsFallingDeep(): return self.GetSpeed().y >= self.fallSpeed
    
    function AnimWalk()
        if self.facingDir == DIRECTION_LEFT
            self.AnimWalkL()
        else
            self.AnimWalkR()
        end
        self.idle = false
        self.SetGfxOffs(0)
    end
    
    function AnimPush()
        if self.facingDir == DIRECTION_LEFT
            self.SetGfxOffs(1)
            self.AnimPushL()
        else
            self.SetGfxOffs(2)
            self.AnimPushR()
        end
        self.idle = false

    end
    
    function AnimFall()
        if self.facingDir == DIRECTION_LEFT
            self.AnimFallL()
        else
            self.AnimFallR()
        end
        self.idle = false
        self.SetGfxOffs(0)
    end
    
    function AnimStand()
        if self.idle: return
        if self.facingDir == DIRECTION_LEFT
            self.AnimStandL()
        else
            self.AnimStandR()
        end
        self.idle = true
        self.SetGfxOffs(0)
    end
    
    function AnimElectro()
        if self.facingDir == DIRECTION_LEFT
            self.AnimElectroL()
        else
            self.AnimElectroR()
        end
        self.SetGfxOffs(0)
    end
    
    function AnimDeathNormal()
        if self.facingDir == DIRECTION_LEFT
            self.AnimDeathNormalL()
        else
            self.AnimDeathNormalR()
        end
        self.SetGfxOffs(0)
    end
    
    
    function AnimWalkL(): self.GetSprite().name = "walkL"
    function AnimWalkR(): self.GetSprite().name = "walkR"
    function AnimPushL(): self.GetSprite().name = "pushL"
    function AnimPushR(): self.GetSprite().name = "pushR"
    function AnimStandL(): self.GetSprite().name = "standL"
    function AnimStandR(): self.GetSprite().name = "standR"
    function AnimFallL(): self.GetSprite().name = (self.IsFallingDeep() ? "fallL" : "falldeepL")
    function AnimFallR(): self.GetSprite().name = (self.IsFallingDeep() ? "fallR" : "falldeepR")
    function AnimElectroL(): self.GetSprite().name = "electroL"
    function AnimElectroR(): self.GetSprite().name = "electroR"
    function AnimDeathNormalL(): self.GetSprite().name = "deathL"
    function AnimDeathNormalR(): self.GetSprite().name = "deathR"
    
    function SetGfxOffs(i)
        self.gfxOffsX, self.gfxOffsY = self.gfxOffs[i]
    end
    
    
    function OnTouchedBy(side, who)
        //> "PlayerEx::OnTouchedBy(", side, ", ", who, ")"
        select who
            case Player, Unit
                return false //can move through us
        end
        return false // TODO: what here??
    end
    
    function OnEnteredBy(side, who)
        //> "PlayerEx::OnEnteredBy(", side, ", ", who, ")"
    end
    
    function OnTouchWall()
        s = self.GetSpeed()
        //> "walltouch! ", s 
        //if not self.CanFallDown()
        if s.y > 0 and self.HasMoved()
            Sound(self.IsFallingDeep() ? "crush.ogg" : "land3.ogg").Play() // TODO: this sound is different for every viking
        end
    end
    
    // Interface used by ActionObject
    function RegisterActionHandler(what)
        if not isCallable(what): raise "PlayerEx::RegisterActionHandler(): must be passed a callable function or object method"
        self.actionHandler = what
        //> self, " ActionHandler = ", what
        return true // return true to confirm registering was successful
    end
    
    function Kill(how)
        if self.godmode: return
        self.dead = true
        self.SetCollisionEnabled(false)
        self.SetAffectedByPhysics(false)
        
        switch how
            case DEATH_ELECTRO
                self.AnimElectro()
                Sound("elecbuzz.ogg").Play()
                
            case DEATH_CRUSH
                self.AnimDeathNormal() // TODO: this must be changed to crush anim
                Sound("crush.ogg").Play()
        end
        
        self._DoRemoveSelf()
    end
    
    function _DoRemoveSelf()
        if self.dead and self.GetSprite().name == "invis"
            self.remove()
        else
            CallScheduler.Schedule(self._DoRemoveSelf, 500)
        end
    end
        
    
    
    
end


export PlayerEx
