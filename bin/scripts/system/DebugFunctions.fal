
function dbg_PrintDir(dir, i)
    i = i ? i : ""
    dl = VFS.GetDirList(dir)
    for d in dl
        > i, "[", d, "]"
        df = dir ? dir + "/" + d : d
        dbg_PrintDir(df, i + "  ")
    end
    
    fl = VFS.GetFileList(dir)
    for f in fl
        > i, f
    end
end

_difftime = 0
function dbg_UpdateDifftime(ms)
    global _difftime
    _difftime = ms
end

function dbg_HookCountRenderHook() // note: this function is highly unoptimized and slow
    global _difftime
    dt = _difftime
    r = GetRenderHookCount()
    u = GetUpdateHookCount()
    i = GetRawInputHookCount()
    s = SNESKeyMap.GetInputHookCount()
    c = CallScheduler.Count()
    oc = Objects.GetCount()
    om = Objects.GetLastId()
    gi = GC.items
    gm = GC.usedMem
    gmk = gm >> 10
    tha = GC.th_active
    thn = GC.th_normal
    g = Physics.GetGravity()
    sx, sy = Screen.GetSize()
    sls = Screen.GetLayerSize()
    sr = Screen.CanResize()
    sfs = Screen.IsFullscreen()
    ej = Engine.JoystickCount()
    w, h = Screen.GetSize()
    font = GetFont("rpgfont")
    fh = font.GetHeight()
    write = Screen.GetSurface().Write
    
    write(0, h - (fh * 7), font, @ "Timing: MS = $dt")
    write(0, h - (fh * 6), font, @ "Physics: Gravity = $g")
    write(0, h - (fh * 5), font, @ "Engine: Joysticks = $ej")
    write(0, h - (fh * 4), font, @ "Objects: Count = $oc; MaxID = $om")
    write(0, h - (fh * 3), font, @ "Screen: $(sx)x$(sy); LayerSize = $sls; Resize = $sr; Full = $sfs")
    write(0, h - (fh * 2), font, @ "Hooks: Render = $r; Update = $u; RawInp = $i; SNESInp = $s; Sched = $c")
    write(0, h - (fh    ), font, @ "Mem: GC: Items = $gi; Bytes = $gm B, $gmk kB; Th_normal = $thn, Th_active = $tha")
end


function dbg_AddHookCountOverlay()
    RegisterRenderHook(dbg_HookCountRenderHook)
    RegisterUpdateHook("dbg_UpdateDifftime", dbg_UpdateDifftime)
end

function dbg_RemoveHookCountOverlay()
    UnregisterRenderHook(dbg_HookCountRenderHook)
    UnregisterUpdateHook("dbg_UpdateDifftime")
end

export
