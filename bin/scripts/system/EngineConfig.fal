
_OutputStream = OutputStream
_InputStream = InputStream
_dirMake = dirMake

EngineConfig = [ => ]

// default entries
EngineConfig["musicVolume"] = MAX_VOLUME
EngineConfig["soundVolume"] = MAX_VOLUME
EngineConfig["menuMusic"] = "liquidat.xm"

// methods
EngineConfig["Save"] = function()
    
    cp = ConfParser()
    for key, value in EngineConfig
        if (not isCallable(value))
            type = "String"
            select value
                case NumericType // int and float
                    if int(value) == value // using this because there is no special Int type
                        type = "Integer"
                    else
                        type = "Numeric"
                    end
            end
            cp.set(key, value, type)
        end
    end
    
    makestrm = function()
        ostr = _OutputStream("saved_data/engine/engine.ini")
        ostr.setEncoding(getSystemEncoding(), CR_TO_CRLF)
        return ostr
    end
    
    try
        strm = makestrm()
    catch
        try: _dirMake("saved_data/engine")
        try
            strm = makestrm()
        catch
            > "Failed to save engine config!"
            return
        end
    end
    
    cp.write(strm)
    strm.close()
    > "Engine config saved."
end

EngineConfig["Load"] = function()
    try
        strm = _InputStream("saved_data/engine/engine.ini")
        strm.setEncoding(getSystemEncoding(), CR_TO_CRLF)
    catch
        return false
    end
    cp = ConfParser()
    cp.read(strm)
    strm.close()
    
    strings = cp.getDictionary("String")
    ints = cp.getDictionary("Integer")
    nums = cp.getDictionary("Numeric")
    
    if strings: EngineConfig.merge(strings) // can simply do this because the conf parser returns strings only
    if nums: for key, val in nums: EngineConfig[key] = numeric(val)
    if ints: for key, val in ints: EngineConfig[key] = int(val)
    
    > "Engine config loaded."
    
    Music.SetVolume(EngineConfig.musicVolume)
    > "Engine config applied."
    return true
end



EngineConfig = bless(EngineConfig)

EngineConfig.Load()


export EngineConfig
