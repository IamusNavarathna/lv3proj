
// InputEventHandler() input hooks
_rawhooks = [ => ]

// GameUpdate() hooks
_uphooks = [ => ]

// PostRender() hooks
_rhooks = []

// ObjectCreated() hooks
_ochooks = []

// --- called by core whenever input occurs ---
function InputEventHandler(e)
    global _rawhooks
    
    for name,func in _rawhooks
        try
            func(e)
        catch in err
            > "ERROR: InputEventHandler(): unhandled exception in hook '", name, "'"
            inspect(func)
            > err
        end
    end
end

function RegisterRawInputHook(who,func)
    global _rawhooks
    if not isCallable(func): raise "RegisterRawInputHook(): func for '" + who + "' not callable, is: " + func
    _rawhooks[who] = func
end

function UnregisterRawInputHook(who)
    global _rawhooks
    _rawhooks -= who
end

function GetRawInputHook(who)
    global _rawhooks
    iter = dictFind(_rawhooks, who)
    if iter: return iter.value()
    return nil
end

function GetRawInputHookCount()
    global _rawhooks
    return len(_rawhooks)
end


// called by the core on every loop
function GameUpdate(ms)
    global _uphooks
    
    // process registered functions. if one returns true, remove from list
    for name, func in _uphooks
        try
            if func(ms): continue dropping
        catch in err
            > "ERROR: GameUpdate(): unhandled exception in hook '", name, "'"
            inspect(func)
            > err
            > "---> Dropping hook to prevent further console spam"
            continue dropping
        end
    end
end

function RegisterUpdateHook(who, func)
    global _uphooks
    if not isCallable(func): raise "RegisterUpdateHook(): func for '" + who + "' not callable, is: " + func
    _uphooks[who] = func
end

function UnregisterUpdateHook(who)
    global _uphooks
    _uphooks -= who
end

function GetUpdateHookCount()
    global _uphooks
    return len(_uphooks)
end

// called by the core after every rendering
function PostRender()
    global _rhooks
    
    // process registered functions. if one returns true, remove from list
    for func in _rhooks
        try
            if func(): continue dropping
        catch in err
            > "ERROR: PostRender(): unhandled exception in a hook:"
            > func
            > err
            > "---> Dropping hook to prevent further console spam"
            continue dropping
        end
    end
end

function RegisterRenderHook(func)
    global _rhooks
    if not isCallable(func): raise "RegisterRenderHook(): '" + func + "' not callable!"
    arrayAdd(_rhooks, func)
end

function UnregisterRenderHook(func)
    global _rhooks
    arrayDel(_rhooks, func)
end

function GetRenderHookCount()
    global _rhooks
    return len(_rhooks)
end

// called whenever an object was created
function ObjectCreated(obj)
    global _ochooks
    
    for func in _ochooks
        try
            func(obj)
        catch in err
            > "ERROR: PostRender(): unhandled exception in a hook:"
            > func
            > err
            // no need to drop, here
        end
    end
end

function RegisterObjectCreateHook(func)
    global _ochooks
    arrayAdd(_ochooks, func)
end

function UnregisterObjectCreateHook(func)
    global _ochooks
    arrayDel(_ochooks, func)
end

export GameUpdate
export RegisterUpdateHook, UnregisterUpdateHook, GetUpdateHookCount

export InputEventHandler
export RegisterRawInputHook, UnregisterRawInputHook, GetRawInputHook, GetRawInputHookCount

export PostRender
export RegisterRenderHook, UnregisterRenderHook, GetRenderHookCount

export ObjectCreated
export RegisterObjectCreateHook, UnregisterObjectCreateHook
