
// static global vars
_isEditor = Engine.GetName() == "editor"


function IsEditor(): return _isEditor
    

function climit(cur, lower, upper)
    if(cur < lower)
        cur = upper
    elif(cur > upper)
        cur = lower
    end
    
    return cur
end

function arraysum(y): return reduce( {a,b => a+b}, y, 0 )

function ReadIniFileAsDict(fn)
    buf = VFS.GetFileAsBuf(fn)
    if not buf
        > "ReadIniFileAsDict: '", fn, "' not found"
        return nil
    end
    
    bb = ByteBuf(buf, true) // for more processing comfort, we wrap a ByteBuf around the MemBuf
    s = bb.readString() // and read one string from it (which, for text files, is the entire file)
    ss = StringStream(s + "\n") // we use one additional whitespace, because the conf parser needs it
    // this is needed so the config parser will not append a newline char to config values if the original data are in windows CRLF encoding
    ss.setEncoding(getSystemEncoding(), CR_TO_CRLF)
    cp = ConfParser()
    try
        cp.read(ss) // can fail if there is a parsing error
    catch in err
        > 'ReadIniFileAsDict("', fn, '") ERROR:'
        > err
        return nil
    end
    
    d = [ => ]
    root = cp.getDictionary() // no section
    if len(root): d[""] = root
    
    for s in cp.getSections()
        sect = cp.getDictionary(s)
        if len(sect): d[s] = sect
    end
    
    return d
end

class Array2D(w, h, arr)
    _w = 0
    _h = 0
    _data = arr
    
    init
        self._w = w
        self._h = h
        if not self._data: self._data = arrayBuffer(w * h)
    end
    
    function __call(x, y)
        return self._data[(y * self._w) + x]
    end
    
    function set(x, y, val)
        self._data[(y * self._w) + x] = val
        return self
    end
    
    function __get_w(): return self._w
    function __get_h(): return self._h
end

function StripFileName(path)
    return "/".merge(path.split("/")[:-1])
end

function strIsInt(s)
    return s.endsWith(int("0" + s).toString()) // the lazy way
end

function strIsNumeric(s)
    dot = false
    nums = "01234567890.-"
    
    pos = -1
    for c in s.split()
        ++pos
        if c notin nums: return false
        
        switch c
            case "."
                if dot: return false // only one dot allowed
                dot = true
            case "-"
                if pos: return false // minus can only be first char
        end
    end
    return true
end

// because falcon is lacking a super()-constructor-call like java has,
// and there is currently no comfortable way to pass params across
// nested constructors, we use this workaround.
// WARNING: it creates a temporary baseClass instance,
//          keep that in mind when using globals or constructors with side effects!!
// <caller>:     should be 'self' in calling ctor
// <baseClass>:  the class ctor of the base class
// <params>:     an array with params to pass (e.g. argv()) - NON-METHODIC!
function super(caller, baseClass, params)
    if not (params and len(params)): return // in this case, nothing to do, subclass already initialized with no params
    caller.apply(([baseClass] + params)().retrieve()) // some weird, dark magic happens here...
end

function HookClassMethod(obj, mthName, hook)
    m = obj.getProperty(mthName)
    f = function()
        passvp(hook)
        passvp(m)
    end
    obj.setProperty(mthName, f)
end


// FIXME: this spams the GC
function DirectionToVector(d)
    switch d
        case DIRECTION_UP
            return Vector(0, -1)
        case DIRECTION_UPRIGHT
            return Vector(1, -1)
        case DIRECTION_RIGHT
            return Vector(1, 0)
        case DIRECTION_DOWNRIGHT
            return Vector(1, 1)
        case DIRECTION_DOWN
            return Vector(0, 1)
        case DIRECTION_DOWNLEFT
            return Vector(-1, 1)
        case DIRECTION_LEFT
            return Vector(-1, 0)
        case DIRECTION_UPLEFT
            return Vector(-1, -1)
        case DIRECTION_NONE
            return Vector(0, 0)
    end
end

export
