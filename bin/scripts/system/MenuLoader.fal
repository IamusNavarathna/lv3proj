
class EngineMainMenu from SinusMenu

    function Setup()
        self.Add( OpenEnginePackageMenu, "Load Game" )
        self.Add( [OpenMenu, EngineSettingsMenu], "Settings" )
        self.Add( Engine.Reset, "[Debug: Hard Reset!]" )
        self.Add( [OpenEngineFileBrowserMenu, ""], "[Debug: VFS Files...]" )
        self.Add( self.OnGoBack, "Exit" )
    end
    
    function OnGoBack()
        Engine.Exit()
    end
    
    function OnUpdate()
        sx, sy = Screen.GetSize()
        self.x = int((sx - self.totalW) / 2)
        self.y = int((sy - self.totalH) / 2)
    end

end

class EngineSettingsMenu from SinusMenu

    _music = []
    _musicPos = 0
    
    function Setup()
        self.Add( { => }, "Music volume" )
        self.Add( { => }, "Sound volume" )
        self.Add( [self.UpdateMusic, 1], "Menu music" )
        self.Add( OpenJoystickTest, "Joystick Test" )
        self.Add( self.OnGoBack, "Back" )
        self.LoadMusic()
    end
    
    function LoadMusic()
        self._music = filter( IsSupportedAudioFile, VFS.GetFileList("music") )
        if len(self._music)
            self._musicPos = self._music.find(EngineConfig.menuMusic)
            if self._musicPos < 0
                self._musicPos = 0
                forceStart = true
            else
                forceStart = false
            end
            self.UpdateMusic(0, forceStart)
        end
    end
    
    function Update()
        self.SinusMenu.Update()
        self.Text(0, "Music Volume [" + EngineConfig.musicVolume + "]")
        self.Text(1, "Sound Volume [" + EngineConfig.soundVolume + "]")
        self.Text(2, "Menu Music [" + EngineConfig.menuMusic + "]")
    end
    
    function UpdateMusic(dir, forceStart)
        count = len(self._music)
        if not count: return
        oldm = self._music[self._musicPos]
        self._musicPos = climit(self._musicPos + dir, 0, count - 1)
        m = self._music[self._musicPos]
        
        EngineConfig.menuMusic = m
        if (m != oldm) or forceStart
            Music.Play(m)
        end
    end
    
    function OnKeyLeft(): self.HandleLR(true)
    function OnKeyRight(): self.HandleLR(false)
    
    function HandleLR(L)
        done = true
        switch self.sel
            case 0
                EngineConfig.musicVolume = climit(EngineConfig.musicVolume + (L ? -5 : 5), 0, MAX_VOLUME)
                Music.SetVolume(EngineConfig.musicVolume)
                
            case 1
                EngineConfig.soundVolume = climit(EngineConfig.soundVolume + (L ? -5 : 5), 0, MAX_VOLUME)
                
            case 2
                self.UpdateMusic(L ? -1 : 1)
                
            default
                done = false
        end
        if done
            self.Update()
            self.sndSelect.Play()
        end
    end
    
    function OnGoBack()
        EngineConfig.Save()
        OpenMenu(EngineMainMenu)
    end

    function OnUpdate()
        sx, sy = Screen.GetSize()
        self.x = int((sx - self.totalW) / 2)
        self.y = int((sy - self.totalH) / 2)
    end
end

class EngineFileListMenu from SinusMenu
    
    init
        self.rowSpacing = 3
    end
    
    function OnGoBack()
        OpenMenu(EngineMainMenu)
    end
    
    function OnUpdate()
        sx, sy = Screen.GetSize()
        self.x = int((sx - self.totalW) / 2)
        self.y = int((sy - self.totalH) / 2)
    end

end


function OpenEngineMainMenu()
    m = OpenMenu(EngineMainMenu)
    Music.Play(EngineConfig.menuMusic)
end

function OpenEnginePackageMenu()
    VFS.Reload()
    packs = PackageSystem.Enumerate()
    packs = PackageSystem.FilterByType(packs, ["game", "demo", "test"])
    
    m = EngineFileListMenu()
    
    for name, entries in packs
        s = entries.get("name")
        if not s: s = "[Package: " + name + "]" // more fail safe
        m.Add( [LoadPackageFile, name], s )
    end
    m.Add(m.OnGoBack, "--- Back ---")
    
    OpenMenu( { => m } ) // use lambda to fake a constructor, because we have already initialized the menu

end

function OpenEngineFileBrowserMenu(path) // for debugging

    > "Entering path: '", path, "'"
    m = EngineFileListMenu()
    m.rowSpacing = 0
    
    d = VFS.GetDirList(path)
    makeFN = { p, x => len(p) ? (p + "/" + x) : x }
    if d
        for s in d
            m.Add( [OpenEngineFileBrowserMenu, makeFN(path, s)], "[" + s + "]" )
        end
    end
    
    f = VFS.GetFileList(path)
    if f
        for s in f
            m.Add( { => > ByteBuf(VFS.GetFileAsBuf(makeFN(path, s)), true).readString() }, s ) // output first readable string to console, for testing
        end
    end
    
    m.Add(m.OnGoBack, "--- Back ---")
    
    OpenMenu( { => m } ) // use lambda to fake a constructor, because we have already initialized the menu
    
end

function OpenJoystickTest()
    CloseCurrentMenu()
    ShowJoystickTestScreen( [OpenMenu, EngineSettingsMenu] )
end

function LoadPackageFile(s)
    > "Selected Package: ", s
    loadfunc = function()
        try
            return PackageSystem.Load(s) // there may be an explicitly raised error somewhere in the package dependencies upon loading
        end
    end
    CallScheduler.Schedule( loadfunc, 1 )
end


CallScheduler.Schedule( OpenEngineMainMenu, 1 )


export OpenEnginePackageMenu
