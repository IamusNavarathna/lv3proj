
// some test stuff to see what the falcon bindings can do
> "-- ACTIVATING TEST --"

// set game constants
Physics.SetGravity(300)

// create olaf character for testing
olaf = Olaf()
olaf.SetPos(64,48)
pcontrol = PlayerController()
pcontrol.Add(olaf)
pcontrol.Assign(1, olaf)
pcontrol.register()

function PosLimitTest(who)
    if(who.y > 600)
        who.SetPos(64,48)
        who.phys.yspeed = 0
        who.phys.yaccel = 0
    end
    CallScheduler.Schedule( .[PosLimitTest who], 1000)
end
 
PosLimitTest(olaf)

function DoSomeResets(who, inp)
    vkey, pl, val = inp
    if (vkey == KeySELECT) and val
        olaf.SetPos(64,48)
        GC.perform(true)
    end
end

RegisterInputHook("DoSomeResets", .[DoSomeResets olaf] )
RegisterRawInputHook("DisableInputOn", .[DisableInputOn SDLK.END])
RegisterRawInputHook("CyceGravityOn", .[CycleGravityOn SDLK.PAGEDOWN])

function DisableInputOn(k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        KeyMap.disabled = not KeyMap.disabled
        > "KeyMap: ", (KeyMap.disabled ? "disabled" : "enabled")
    end
end

function CycleGravityOn(k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        CycleGravity()
        > "Gravity is now: ", Physics.GetGravity()
    end
end

function CycleGravity()
    switch Physics.GetGravity()
        case 300
            Physics.SetGravity(60)
        case 60
            Physics.SetGravity(-80)
        default
            Physics.SetGravity(300)
    end
end


// open a menu. so far only controllable via console.
// this is just here to check IF something works
//OpenMenu(MainMenu) // THIS CONFLICTS WITH OTHER KEYBOARD INPUT!!

// replace energy streams after 3 secs
//CallScheduler.Schedule( ReplaceEnergyStreams, 3000)

// fill screen after 6 secs have passed
//CallScheduler.Schedule( FillScreenWithWater, 6000)

// replace all blue energy lines with green ones
function ReplaceEnergyStreams()
    dim = Screen.GetLayer(6).GetArraySize()
    enx = Tile("sprites/enx.anim")
    en  = Tile("sprites/en.anim")
    for ly in [Screen.GetLayer(6), Screen.GetLayer(7)]
        for y = 0 to dim - 1
            for x = 0 to dim - 1
                t = ly.GetTile(x,y)
                if(t)        
                    if(t.filename == "sprites/en.anim")
                        ly.SetTile(x,y,enx)
                    elif(t.filename == "sprites/enx.anim")
                        ly.SetTile(x,y,en)
                    end
                end
            end
        end
    end
end



function FillScreenWithWater()
    layer = Screen.GetLayer(8)
    dim = layer.GetArraySize()
    tile = Tile("water/waterfull.png")
    if(layer and tile)
        for y = 0 to dim - 1
            for x = 0 to dim - 1
                layer.SetTile(x,y,tile)
            end
            CallScheduler.Schedule( [DrainWaterRow, y], y * 1200)
        end
    end
end

// completely delete the transparent tiles after the water was drained, row-wise
function DeleteWaterRow(y)
    layer = Screen.GetLayer(8)
    dim = layer.GetArraySize()
    for x = 0 to dim - 1
        layer.SetTile(x,y,nil)
    end
end

function DrainWaterRow(y)
    tile = Tile("water/water_test.anim")
    if(tile.type == TILETYPE_ANIMATED) // just to be sure
        tile.name = "sink" // toggle animation
        tile.frame = 0 // and start it
    end
    layer = Screen.GetLayer(8)
    dim = layer.GetArraySize()
    // place the tile along the whole row
    for x = 0 to dim - 1
        layer.SetTile(x,y,tile)
    end
    // cleanup after the row was drained
    CallScheduler.Schedule( [DeleteWaterRow, y], 1200)
end

