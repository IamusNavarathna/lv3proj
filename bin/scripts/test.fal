
// some test stuff to see what the falcon bindings can do
> "-- Setting up test Level --"

Screen.CreateInfoLayer()
InitialMapSetup()
> "-- Created & set up info layer --"



// setup the collision map, and calculate it directly
Game.CreateCollisionMap(true)
> "-- Calculated collision map --"

// set game constants
Physics.SetGravity(300)

// create olaf character for testing
olaf = Olaf()
olaf.SetPos(64,48)
pcontrol = PlayerController()
pcontrol.Add(olaf)
pcontrol.Assign(1, olaf)
pcontrol.register()

img = ImageObject("sprites/lv2logo.png")

function PosLimitTest(who)
    if(who.y > 600)
        who.SetPos(64,48)
        who.phys.yspeed = 0
        who.phys.yaccel = 0
    end
    CallScheduler.Schedule( .[PosLimitTest who], 1000)
end
 
PosLimitTest(olaf)

function DoSomeResets(who, inp)
    vkey, pl, val = inp
    if (vkey == KeySELECT) and val
        olaf.SetPos(64,48)
        GC.perform(true)
    end
end

RegisterInputHook("DoSomeResets", .[DoSomeResets olaf] )
RegisterRawInputHook("DisableInputOn", .[DisableInputOn SDLK.END])
RegisterRawInputHook("CyceGravityOn", .[CycleGravityOn SDLK.PAGEDOWN])
RegisterRawInputHook("ToggleOlafBounceOn", .[ToggleOlafBounceOn SDLK.PAGEUP])

function DisableInputOn(k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        KeyMap.disabled = not KeyMap.disabled
        > "KeyMap: ", (KeyMap.disabled ? "disabled" : "enabled")
    end
end

function CycleGravityOn(k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        CycleGravity()
        > "Gravity is now: ", Physics.GetGravity()
    end
end

function ToggleOlafBounceOn(k, e)
    ty, src, which, value = e
    if ty == EVENT_TYPE_KEYBOARD and which == k and value != 0
        p = olaf.phys
        p.dbounce = p.dbounce ? 0 : 0.6
        > "Olaf bounce is now: ", p.dbounce
    end
end


function CycleGravity()
    switch Physics.GetGravity()
        case 300
            Physics.SetGravity(60)
        case 60
            Physics.SetGravity(-80)
        default
            Physics.SetGravity(300)
    end
end

enum TFlag
    NONE    = 0x0000
    ELECTRO = 0x0001
    BREAK   = 0x0002
end


function InitialMapSetup()
    breakable = nil //Tile("misc/breakable.png")
    trigger = nil //Tile("misc/trigger.png")
    redcross = nil //Tile("misc/noimage.png")
    
tileInfoSetup = [
    //   filename              =>  [flag to set, overlay to place, object to spawn, special ID]
    "sprites/en.anim"          => .[TFlag.ELECTRO    trigger      nil               0     ],
    "sprites/en_v.anim"        => .[TFlag.ELECTRO    trigger      nil               0     ],
    "sprites/enx.anim"         => .[TFlag.ELECTRO    redcross     nil               0     ],
    "sprites/greyblock.png"    => .[TFlag.BREAK      breakable    nil               0     ],
    "sprites/bomb.png"         => .[TFlag.NONE       nil          BombObject        0     ],
    "sprites/button.png"       => .[TFlag.NONE       nil          Button            1     ]
]

buttonActions = .[
            BA_KillEn1
            BA_KillEn2
            BA_KillGreyBlocks1
        ]
        
    buttonCounter = 0
    
    d = Screen.GetLayerSize() - 1
    for ly in [Screen.GetLayer(6), Screen.GetLayer(7)]
        for y = 0 to d
            for x = 0 to d
                t = ly.GetTile(x,y)
                if(t and (t.filename in tileInfoSetup) )
                    flag, overlay, objcons, special = tileInfoSetup[t.filename]
                    Screen.SetTileInfo(x,y, flag)
                    if overlay: Screen.GetLayer(8).SetTile(x,y,overlay)
                    if isCallable(objcons)
                        xpos = x * 16
                        ypos = y * 16
                        obj = objcons()
                        switch special
                            case 1
                                if buttonCounter < len(buttonActions)
                                    obj.SetOnPush(buttonActions[buttonCounter])
                                    buttonCounter++
                                end
                            
                            default
                        end
                                
                        obj.SetPos(xpos,ypos) // set new object in place
                        ly.SetTile(x,y,nil) // and remove the static tile
                    end
                        
                end
            end
        end
    end
end

function BA_KillEn1()
    ly = Screen.GetLayer(7)
    for x = 26 to 28: ly.GetTile(x,5).name = "swoff"
    for x = 25 to 28: ly.GetTile(x,11).name = "swoff"
    for x = 35 to 37: ly.GetTile(x,7).name = "swoff"
end

function BA_KillEn2()
    ly = Screen.GetLayer(7)
    for y = 7 to 9: ly.GetTile(12,y).name = "swoff"
    ly.GetTile(4,13).name = "swoff"
    ly.GetTile(5,13).name = "swoff"
end
    
function BA_KillGreyBlocks1()
    ly = Screen.GetLayer(6)
    blk = Tile("ship/broken.png")
    for x = 9 to 11
        for y = 5 to 6
            ly.SetTile(x,y,nil)
            ly.SetTile(x,y,blk, false)
        end
    end
    for x = 10 to 11
        for y = 10 to 11
            ly.SetTile(x,y,nil)
            ly.SetTile(x,y,blk, false)
        end
    end
end

// open a menu. so far only controllable via console.
// this is just here to check IF something works
//OpenMenu(MainMenu) // THIS CONFLICTS WITH OTHER KEYBOARD INPUT!!

// replace energy streams after 3 secs
//CallScheduler.Schedule( ReplaceEnergyStreams, 3000)

// fill screen after 6 secs have passed
//CallScheduler.Schedule( FillScreenWithWater, 6000)

// replace all blue energy lines with green ones
function ReplaceEnergyStreams()
    dim = Screen.GetLayerSize()
    enx = Tile("sprites/enx.anim")
    en  = Tile("sprites/en.anim")
    for ly in [Screen.GetLayer(6), Screen.GetLayer(7)]
        for y = 0 to dim - 1
            for x = 0 to dim - 1
                t = ly.GetTile(x,y)
                if(t)        
                    if(t.filename == "sprites/en.anim")
                        ly.SetTile(x,y,enx)
                    elif(t.filename == "sprites/enx.anim")
                        ly.SetTile(x,y,en)
                    end
                end
            end
        end
    end
end



function FillScreenWithWater()
    layer = Screen.GetLayer(8)
    dim = layer.GetArraySize()
    tile = Tile("water/waterfull.png")
    if(layer and tile)
        for y = 0 to dim - 1
            for x = 0 to dim - 1
                layer.SetTile(x,y,tile)
            end
            CallScheduler.Schedule( [DrainWaterRow, y], y * 1200)
        end
    end
end

// completely delete the transparent tiles after the water was drained, row-wise
function DeleteWaterRow(y)
    layer = Screen.GetLayer(8)
    dim = layer.GetArraySize()
    for x = 0 to dim - 1
        layer.SetTile(x,y,nil)
    end
end

function DrainWaterRow(y)
    tile = Tile("water/water_test.anim")
    if(tile.type == TILETYPE_ANIMATED) // just to be sure
        tile.name = "sink" // toggle animation
        tile.frame = 0 // and start it
    end
    layer = Screen.GetLayer(8)
    dim = layer.GetArraySize()
    // place the tile along the whole row
    for x = 0 to dim - 1
        layer.SetTile(x,y,tile)
    end
    // cleanup after the row was drained
    CallScheduler.Schedule( [DeleteWaterRow, y], 1200)
end

> "-- Level setup complete --"

