
class Olaf from PlayerEx

    gfx = "sprites/olaf1.anim"
    shieldUp = false
    glideSpeed = 32
    
    init
        self.gfxOffs = [ [-6, -4], [0, -4], [-12, -4] ] // graphics offsets, [0]: normal, [1]: pushing left, [2]: pushing right
        self.SetGfxOffs(0)
        self.SetBBox(6,4,20,28) // this is not fully correct but should be sufficient for now
    end

    function OnKeyB(pressed)
        if pressed: self.ToggleShield()
    end
    
    function OnKeyY(pressed)
        if pressed: self.ToggleShield()
    end
    
    function ToggleShield()
        self.shieldUp = not self.shieldUp
        self.idle = false
        if self.shieldUp
            self.phys.ymaxspeed = self.glideSpeed
            self.h = 32
            self.y -= 4
        else
            self.phys.ymaxspeed = self.fallSpeed
            self.h = 28 // as above
            self.y += 4
        end
        self.SetGfxOffs(0)
    end
    
    function SetGfxOffs(i)
        xo, yo = self.gfxOffs[i]
        if self.h == 32: yo = 0
        self.gfxOffsX = xo
        self.gfxOffsY = yo
    end
    
    function IsFallingDeep(): return (not self.shieldUp) and (self.phys.yspeed >= self.fallSpeed)
    
    function AnimWalkL(): self.GetSprite().name = (self.shieldUp ? "walksuL" : "walkL")
    function AnimWalkR(): self.GetSprite().name = (self.shieldUp ? "walksuR" : "walkR")
    function AnimStandL(): self.GetSprite().name = (self.shieldUp ? "standsuL" : "standL")
    function AnimStandR(): self.GetSprite().name = (self.shieldUp ? "standsuR" : "standR")
    function AnimFallL(): self.AnimFallLR("L")
    function AnimFallR(): self.AnimFallLR("R")
    function AnimFallLR(d)
        p = self.phys
        sp = self.GetSprite()
        if not sp: return // ???!!?!
        if self.shieldUp
            if p.xspeed
                sp.name = "glidemove" + d
            else
                sp.name = "glide" + d
            end
        elif self.IsFallingDeep()
            sp.name = "falldeep" + d
        else
            sp.name = "fall" + d
        end
    end
    
    function OnTouchedBy(side, who, sec)
        // stop anything that comes from above in case we have the shield up
        //> "Olaf::OnTouchedBy(", side, ", ", who, ")"
        if side == SIDE_TOP and self.shieldUp
            if who provides Stoppable
                return who.Stoppable()
            else
                return true
            end
        end
        return self.PlayerEx.OnTouchedBy(side, who)
    end
    
    function IsBlocking(side)
        if side == SIDE_TOP and self.shieldUp: return true
        return self.PlayerEx.IsBlocking(side)
    end
    

end

export Olaf
