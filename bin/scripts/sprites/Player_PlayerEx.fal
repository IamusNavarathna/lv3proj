class PlayerEx from Player
    
    gfx = nil
    walkSpeed = 64
    climbSpeed = 64 // NYI
    fallSpeed = 256
    raiseSpeed = 32 // NYI
    facingDir = DIRECTION_RIGHT
    movingDir = DIRECTION_NONE
    
    baseSpeedX = 0 // speed from external source (beeing transported, blown away by fan, etc.)
    ownSpeedX = 0 // own walking speed
    
    init
        self.SetBBox(0,0,32,32)
        if self.gfx
            tile = self.SetSprite(self.gfx)
            if tile: tile.name = "standR"
        end
        
        // init physics
        p = self.phys // note that p is a reference automatically, and all fields initialized with 0
        p.weight = 70 // to have some default value
        p.xspeed = 0
        p.yspeed = 0
        p.xmaxspeed = self.walkSpeed  * 2 // do we really need a limit here?
        p.ymaxspeed = self.fallSpeed
        p.xaccel = 0
        p.yaccel = 0
        p.xfriction = 0
        p.yfriction = 0
        self.SetAffectedByPhysics(true)

        
    end
    
    function OnUpdate(ms)
        self.UpdateMovement()
        self.UpdateAnim()
    end
    
    function UpdateMovement()
        self.phys.xspeed = self.baseSpeedX + self.ownSpeedX
    end
    
    function UpdateAnim()
        if self.phys.yspeed or self.CanFallDown() // TODO: ladder climbing etc
            self.AnimFall()
        elif self.ownSpeedX
            if self.CanMoveToDir(self.movingDir)
                self.AnimWalk()
            else
                self.AnimPush()
            end
        else
            self.AnimStand()
        end
    end
    
    function SetWalking(d)
        switch d
            case DIRECTION_LEFT
                self.facingDir = DIRECTION_LEFT
                self.ownSpeedX = -self.walkSpeed
            
            case DIRECTION_RIGHT
                self.facingDir = DIRECTION_RIGHT
                self.ownSpeedX = self.walkSpeed
            
            default
                self.ownSpeedX = 0
        end
        self.movingDir = d
    end
        
    
    function OnInput(vkey, val)
        switch vkey
            case KeyLEFT
                self.OnKeyLeft(val)
                
            case KeyRIGHT
                self.OnKeyRight(val)
                
            case KeyUP
                self.OnKeyUp(val)
                
            case KeyDOWN
                self.OnKeyDown(val)
                
            case KeyA
                self.OnKeyA(val)
                
            case KeyB
                self.OnKeyB(val)
                
            case KeyX
                self.OnKeyX(val)
                
            case KeyY
                self.OnKeyY(val)
                
            default
                > "PlayerEx::OnInput(", vkey, ", ", val, ") for '", self, "' unhandled!"
        end
    end
    
    function OnKeyLeft(pressed)
        p = self.phys
        if pressed
            self.SetWalking(DIRECTION_LEFT)
        else
            if(self.movingDir == DIRECTION_LEFT) // already moving in opposite direction?
                self.SetWalking(DIRECTION_NONE)
            end
        end
        self.UpdateMovement()
    end
    
    function OnKeyRight(pressed)
        p = self.phys
        if pressed
            self.SetWalking(DIRECTION_RIGHT)
        else
            if(self.movingDir == DIRECTION_RIGHT) // already moving in opposite direction?
                self.SetWalking(DIRECTION_NONE)
            end
        end
        self.UpdateMovement()
    end
    
    // --DEBUG JUMP--
    function OnKeyUp(pressed)
        if pressed: self.phys.yspeed = -128
    end
    
    function OnKeyDown(pressed)
    end
    
    function OnKeyA(pressed)
    end
    
    function OnKeyB(pressed)
    end
    
    function OnKeyX(pressed)
    end
    
    function OnKeyY(pressed)
    end
    
    function IsFallingDeep(): return self.phys.yspeed >= self.fallSpeed
    
    function AnimWalk(): return self.facingDir == DIRECTION_LEFT ? self.AnimWalkL() : self.AnimWalkR()
    function AnimPush(): return self.facingDir == DIRECTION_LEFT ? self.AnimPushL() : self.AnimPushR()
    function AnimStand(): return self.facingDir == DIRECTION_LEFT ? self.AnimStandL() : self.AnimStandR() 
    function AnimFall(): return self.facingDir == DIRECTION_LEFT ? self.AnimFallL() : self.AnimFallR()
    
    function AnimWalkL(): self.GetSprite().name = "walkL"
    function AnimWalkR(): self.GetSprite().name = "walkR"
    function AnimPushL(): self.GetSprite().name = "pushL"
    function AnimPushR(): self.GetSprite().name = "pushR"
    function AnimStandL(): self.GetSprite().name = "standL"
    function AnimStandR(): self.GetSprite().name = "standR"
    function AnimFallL(): self.GetSprite().name = (self.IsFallingDeep() ? "fallL" : "falldeepL")
    function AnimFallR(): self.GetSprite().name = (self.IsFallingDeep() ? "fallR" : "falldeepR")
    
    
end


export PlayerEx
