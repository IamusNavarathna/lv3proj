
_langs = .[ "en" "de" ] // more to come?
_langSel = 0

function GetLanguage()
    global _langs, _langSel
    return _langs[_langSel]
end

/* // these are for later
function IncrSoundVolume(amount)
    vol = Game.GetSoundVolume()
    if(vol + amount > MAX_VOLUME)
        Game.SetSoundVolume(MAX_VOLUME)
    else
        Game.SetSoundVolume(vol + amount)
    end
end

function DecrSoundVolume(amount)
    vol = Game.GetSoundVolume()
    if(vol - amount < 0)
        Game.SetSoundVolume(0)
    else
        Game.SetSoundVolume(vol - amount)
    end
end

function IncrMusicVolume(amount)
    vol = Game.GetMusicVolume()
    if(vol + amount > MAX_VOLUME)
        Game.SetMusicVolume(MAX_VOLUME)
    else
        Game.SetMusicVolume(vol + amount)
    end
end

function DecrMusicVolume(amount)
    vol = Game.GetMusicVolume()
    if(vol - amount < 0)
        Game.SetMusicVolume(0)
    else
        Game.SetMusicVolume(vol - amount)
    end
end
*/

function ToggleSound()
    if (Game.GetSoundVolume())
        Game.SetSoundVolume(0)
    else
        Game.SetSoundVolume(MAX_VOLUME)
    end
end

function ToggleMusic()
    if (Game.GetMusicVolume())
        Game.SetMusicVolume(0)
    else
        Game.SetMusicVolume(MAX_VOLUME)
    end
end




function IncrPlayerCount()
    Game.SetPlayerCount(climit(Game.GetPlayerCount() + 1, 1, 3))
end

function DecrPlayerCount()
    Game.SetPlayerCount(climit(Game.GetPlayerCount() - 1, 1, 3))
end

function IncrLanguage()
    global _langs, _langSel
    _langSel = (_langSel + 1) % len(_langs)
end

function DecrLanguage()
    global _langs, _langSel
    if(_langSel <= 0)
        _langSel = len(_langs) - 1
    else
        _langSel--
    end
end


class MainMenu from Menu

    function Setup()
        self.Add( .[OpenMenu MainMenuPlay] )
        self.Add( .[OpenMenu MainMenuOptions] )
        self.Add( self.OnGoBack )
    end
    
    function Update()
        self.Text(0, "Play")
        self.Text(1, "Options")
        self.Text(2, "Exit")
    end
    
    function OnGoBack()
        Game.Exit()
    end
end

class MainMenuPlay from Menu
    
    function Setup()
        self.Add( .[Game.LoadLevel "lv_1.lvsp"] )
        self.Add( .[Game.LoadLevel "lv_2.lvsp"] )
        self.Add( .[Game.LoadLevel "lv_3.lvsp"] )
        self.Add( .[OpenMenu MainMenuPlayCustom] )
        self.Add( self.OnGoBack )
    end
    
    function Update()
        self.Text(0, "Lost Vikings 1")
        self.Text(1, "Lost Vikings 2")
        self.Text(2, "Lost Vikings 3")
        self.Text(3, "Custom...")
        self.Text(4, "Back")
    end
    
    function OnGoBack()
        OpenMenu(MainMenu)
    end
    
end

class MainMenuPlayCustom from Menu

    // TODO!
    function Setup()
        self.Add( self.OnGoBack )
        self.Add( self.OnGoBack )
    end
    
    function Update()
        self.Text(0, "Not yet!")
        self.Text(1, "Back")
    end
    
    function OnGoBack()
        OpenMenu(MainMenuPlay)
    end

end

class MainMenuOptions from Menu
    
    function Setup()
        self.Add( IncrPlayerCount )
        self.Add( ToggleSound )
        self.Add( ToggleMusic )
        self.Add( IncrLanguage )
        self.Add( .[OpenMenu MainMenuControls] )
        self.Add( self.OnGoBack )
    end
    
    function Update()
        self.Text(0, "Players: " + Game.GetPlayerCount())
        self.Text(1, "Sound: " + Game.GetSoundVolume())
        self.Text(2, "Music: " + Game.GetMusicVolume())
        self.Text(3, "Language: " + GetLanguage())
        self.Text(4, "Controls")
        self.Text(5, "Back")
    end
    
    function OnGoBack()
        OpenMenu(MainMenu)
    end
    
    function OnKeyRight()
        switch self.sel
            case 0
                IncrPlayerCount()
            case 1
                ToggleSound()
            case 2
                ToggleMusic()
            case 3
                IncrLanguage()
        end
    end
    
    function OnKeyLeft()
        switch self.sel
            case 0
                DecrPlayerCount()
            case 1
                ToggleSound()
            case 2
                ToggleMusic()
            case 3
                DecrLanguage()
        end
    end
end

class MainMenuControls from Menu

    function Setup()
        self.Add( .[OpenMenu .[MainMenuControlsPlayer 1] ] )
        self.Add( .[OpenMenu .[MainMenuControlsPlayer 2] ] )
        self.Add( .[OpenMenu .[MainMenuControlsPlayer 3] ] )
        self.Add( self.OnGoBack )
    end
    
    function Update()
        self.Text(0, "Player 1")
        self.Text(1, "Player 2")
        self.Text(2, "Player 3")
        self.Text(3, "Back")
    end
    
    function OnGoBack()
        OpenMenu(MainMenuOptions)
    end
end

class MainMenuControlsPlayer(pNum) from Menu
    
    listenKey = nil
    listenEntry = nil
    playerNum = pNum
    oldInputHook = nil
    
    function Setup()
        c = 0
        self.Add( .[self.ListenForKey KeyUP     c++] )
        self.Add( .[self.ListenForKey KeyDOWN   c++] )
        self.Add( .[self.ListenForKey KeyLEFT   c++] )
        self.Add( .[self.ListenForKey KeyRIGHT  c++] )
        
        self.Add( .[self.ListenForKey KeyA      c++] )
        self.Add( .[self.ListenForKey KeyB      c++] )
        
        self.Add( .[self.ListenForKey KeyX      c++] )
        self.Add( .[self.ListenForKey KeyY      c++] )
        
        self.Add( .[self.ListenForKey KeyL      c++] )
        self.Add( .[self.ListenForKey KeyR      c++] )
        
        self.Add( .[self.ListenForKey KeySTART  c++] )
        self.Add( .[self.ListenForKey KeySELECT c++] )
        
        self.Add( self.OnGoBack )
    end
    
    function Textx(e, str)
        if (e == self.listenEntry): str += " (*)"
        self.Text(e,str)
    end
    
    function Update()
        c = 0
        // TODO: show current bindings
        self.Textx(c++, "Up")
        self.Textx(c++, "Down")
        self.Textx(c++, "Left")
        self.Textx(c++, "Right")
        
        self.Textx(c++, "A")
        self.Textx(c++, "B")
        
        self.Textx(c++, "X")
        self.Textx(c++, "Y")
        
        self.Textx(c++, "L")
        self.Textx(c++, "R")
        
        self.Textx(c++, "Start")
        self.Textx(c++, "Select")
        
        self.Text(c++, "..Back")
    end
    
    function OnGoBack()
        UnregisterRawInputHook(self)
        OpenMenu(MainMenuControls)
    end
    
    function ListenForKey(vkey, entry)
        self.listenEntry = entry
        self.accept_esc = false
        self.listenKey = vkey
        self.oldInputHook = GetRawInputHook(self)
    end
    
    function OnRawInputCustom(e)
    
        if(self.listenKey == nil)
            return false
        end
        
        ty, src, which, value = e
        if(ty == EVENT_TYPE_KEYBOARD and which == SDLK.ESCAPE)
            KeyMap.Unbind(ty,src,which)
        else
            KeyMap.Bind(ty, src, which, self.listenKey, self.playerNum)
        end
        self.listenKey = nil
        self.listenEntry = nil
        self.accept_esc = true
        RegisterRawInputHook(self, self.oldInputHook)
        self.oldInputHook = nil
        return true
    end
        
end



export
