/* This file should contain functions registering themselves on startup,
providing additional debug info */

function dbg_ApplyHooks()
    if EngineConfig.get("enableDebugHooks")
        dbg_AddHookCountOverlay()
    else
        dbg_RemoveHookCountOverlay()
    end
end

function dbg_IncrSpeed()
    Engine.SetSpeed(Engine.GetSpeed() + 0.1)
end

function dbg_DecrSpeed()
    s = Engine.GetSpeed() - 0.1
    if s < 0: s = 0
    Engine.SetSpeed(s)
end

function dbg_ToggleOverlay()
    EngineConfig["enableDebugHooks"] = not EngineConfig.get("enableDebugHooks")
    dbg_ApplyHooks()
end

function dbg_ToggleDebugText2(on)
    if on
        TextOutput.Enable()
    else
        TextOutput.Disable()
    end
end

function dbg_ToggleDebugText(on)
    x = not EngineConfig.get("enableDebugText")
    EngineConfig["enableDebugText"] = x
    dbg_ToggleDebugText2(x)
end

function dbg_EnlageDebugText()
    TextOutput.SetLines(TextOutput.GetLines() + 1)
    EngineConfig["debugTextLines"] = TextOutput.GetLines()
end

function dbg_ShrinkDebugText()
    TextOutput.SetLines(TextOutput.GetLines() - 1)
    EngineConfig["debugTextLines"] = TextOutput.GetLines()
end

function dbg_LoadSettings()
    dlines = EngineConfig.get("debugTextLines")
    if dlines: TextOutput.SetLines(dlines)
    
    dtxt = EngineConfig.get("enableDebugText")
    if dtxt != nil : dbg_ToggleDebugText2(dtxt)
    
end


Keyboard.RegisterCallback( { p => if p: dbg_DecrSpeed() }, SDLK.F5)
Keyboard.RegisterCallback( { p => if p: dbg_IncrSpeed() }, SDLK.F6)
Keyboard.RegisterCallback( { p => if p: dbg_ToggleOverlay() }, SDLK.F7)
Keyboard.RegisterCallback( { p => if p: dbg_ToggleDebugText() }, SDLK.F8)
Keyboard.RegisterCallback( { p => if p: dbg_ShrinkDebugText() }, SDLK.F9)
Keyboard.RegisterCallback( { p => if p: dbg_EnlageDebugText() }, SDLK.F10)
Keyboard.RegisterCallback( { p => if p: Engine.Reset() }, SDLK.r, SDLK.LALT)

Keyboard.RegisterCallback( { p => if p: EngineConfig.Save() }, SDLK.F12)

dbg_LoadSettings()

dbg_ApplyHooks()

export dbg_ApplyHooks
