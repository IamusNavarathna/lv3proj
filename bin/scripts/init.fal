/*#
@beginmodule module_sc_sys
*/

/*#
@class ScriptLoader
@ingroup group_internal
@brief Automatic script loader, beeing able to resolve dependencies

The ScriptLoader class takes care of loading scripts from directories, or single files.
It can be passed a list of files and directories, loading all of them with a single call,
resolving dependencies between the scripts.

In case no class instance is needed, it has static functions that can be used as well.
Note that by default, all paths are relative to the executable directory + "/scripts".
@code
    // class instance
    loader = ScriptLoader()
    loader.AddDir("system")
    loader.AddDir("mydir")
    loader.AddFile("extra.fal")
    loader.DoLoad() // load all scripts the the 2 directores, + extra.fal, resolving dependencies between all
    
    // static access
    ScriptLoader.LoadDir("system")
    ScriptLoader.LoadDir("mydir")
    ScriptLoader.LoadFile("extra.fal")
    // this loads all files as well, but if any scripts in "system" depend on some in "mydir",
    // it can not be resolved, and loading will fail.
@endcode

@note External packages should use the functions provided by the @b Package class, which will take care of using the correct paths.

*/

class ScriptLoader

    _list = nil
    init
        self._list = List()
    end
    
    /*#
    @method FillList ScriptLoader
    @param list A list
    @param dir The directory whose files to add the the list
    @brief Traverses subdirectories recursively and finds all *.fal files within
    @note This is a static function.
    */
    function FillList(list, dir)
        > "FillList: '", dir , "'"
        subdirs = VFS.GetDirList(dir)
        dirbase = dir + "/"
        if subdirs: for d in subdirs: self.FillList(list, dirbase + d)
        
        files = VFS.GetFileList(dir)
        if files: for fn in files: if fn.endsWith(".fal"): list.push( [fn, dir] )
    end

    /*#
    @method LoadFromList ScriptLoader
    @param files A list containing script names (with realtive paths)
    @brief Loads scripts from a list previously filled with @b FillList
    @note This is a static function.
    */
    function LoadFromList(files)
        done_count = 0
        collect_errors = false
        errors = [ => ]
        loop
            startlen = files.len()
            // > "LoadScriptsFromList starting with " + startlen + " scripts"
            for fn, path in files
                sc = path + "/" + fn
                // > "Falcon:Init: Loading script '" + sc + "'"
                try
                    include_ex(fn, "", path) // will raise an error if loading failed (be it unresolved symbols or something else)
                    > "** Falcon script '" + sc + "' loaded"
                    done_count++
                    continue dropping // when we reached this point loading the file was sucessful, remove it from the list
                catch Error in err
                    if(collect_errors)
                        errors[sc] = err
                    else
                        //> "... failed, trying next one"
                    end
                end
            end
            endlen = files.len()
            
            if(startlen == 0)
                if(done_count > 0)
                    > "All " + done_count + " scripts loaded successfully"
                end
                break
            elif(startlen == endlen) // no file could be loaded in this run, there are dependencies we cant resolve or just files with syntax error
                if(collect_errors)
                    // >  "Falcon: " + done_count + " out of " + (done_count + endlen) + " scripts loaded."
                    > "Unable to load all scripts. Files:"
                    for sc, err in errors
                        > "[ " + sc + " ]"
                    end
                    > ""
                    > "----= Errors =----------------------------------------"
                    for sc, err in errors
                        > err
                        > ""
                    end
                    break           
                else
                    collect_errors = true
                    // > "LoadScriptsFromList -- error collect in next loop"
                end
                
            end
            // > "LoadScriptsFromList loop finished with " + endlen + " scripts")
        end
    end
    
    /*#
    @method LoadDir ScriptLoader
    @param dir Relative directory name
    @brief Recursively load *.fal files from a directory.
    @note This is a static function.
    */
    function LoadDir(dir)
        if not dir: raise "ScriptLoader::LoadDir() - directory is nil or empty string, oops!"
        
        list = List()
        self.FillList(list, "scripts/" + dir)
        
        self.LoadFromList(list)
    end
    
    /*#
    @method LoadFile ScriptLoader
    @param fn File name of the scipt (without any directories)
    @param dir If supplied, use this dir for loading, otherwise use "scripts"
    @optparam ex If true, do not force "/scripts/" subdir, use full relative path instead
    @brief Load a script file
    @return true if the script was loaded successfully, false if not
    @note This is a static function.
    */
    function LoadFile(fn, dir, ex)
        if not dir
            dir = "" // be sure its not nil
        elif dir.endsWith("/")
            dir = dir[:-1] // remove "/" (need this in include_ex)
        end
        fullfn = dir + "/" + fn
        if not ex: fullfn = "scripts/" + fullfn
        
        if not VFS.HasFile(fullfn)
            > "ScriptLoader::LoadFile: '", fullfn, "' not found"
            DbgBreak()
            return false // not found
        end
        
        > "ScriptLoader::LoadFile: '", fullfn, "' ..."
        
        try
            if dir
                d = ex ? dir : "scripts/" + dir
                include_ex(fn, "", d)
                > "** Falcon script '" + d + "/" + fn + "' loaded"
            else
                include_ex(fn, "", "scripts")
                > "** Falcon script 'scripts/" + fn + "' loaded"
            end
            return true
        catch Error in err
            > "ScriptLoader::LoadFile('", fn, "', '", dir, "') failed:"
            > err
        end
        return false
    end
    
    /*#
    @method AddDir ScriptLoader
    @param dir Relative directory name
    @param ex If true, do not force "/scripts/" subdir, use full relative path instead
    @brief Register all files in a directory for later loading, recursively
    */
    function AddDir(dir, ex)
        if dir
            if not ex
                self.FillList(self._list, "scripts/" + dir)
            else
                self.FillList(self._list, dir)
            end
        else
            self.FillList(self._list, "scripts")
        end
    end 
    
    /*#
    @method AddFile ScriptLoader
    @param fn File name of the scipt (without any directories)
    @param dir Relative directory name
    @param ex If true, do not force "/scripts/" subdir, use full relative path instead
    @brief Registers a file for later loading
    */
    function AddFile(fn, dir, ex)
        if dir
            if not ex
                self._list.push( [fn, "scripts/" + dir] )
            else
                self._list.push( [fn, dir] )
            end
        else
            self._list.push( [fn, "scripts"] )
        end
    end
    
    /*#
    @method DoLoad ScriptLoader
    @brief Load all previously registered files
    */
    function DoLoad()
        self.LoadFromList(self._list)
    end
    
end


// --- initial load ---
ScriptLoader.LoadDir("system")
ScriptLoader.LoadDir(Engine.GetName()) // can be "game" or "editor"
ScriptLoader.LoadDir("functors")

// after we are loaded, drop the init.fal loader script from the VFS,
// just to be on the safe side if someone reloads the scripts root dir, which would attempt to load this script again,
// which would cause major errors
VFS.AddBufAsFile("scripts/init.fal", ByteBuf().write("// cleared").toMemBuf())


// the scripts loaded until now will take care of the rest
// let's broadcast an event, so that scripts waiting that initialization is finished
// may do some finalization jobs or whatever
broadcast("INIT_DONE");


export

