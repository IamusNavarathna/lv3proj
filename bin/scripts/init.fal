
class ScriptLoader

    _list = nil
    init
        self._list = List()
    end
    
    
    // -- static function --
    function FillList(list, dir)
        > "FillList: '", dir , "'"
        subdirs = VFS.GetDirList(dir)
        dirbase = dir + "/"
        if subdirs: for d in subdirs: self.FillList(list, dirbase + d)
        
        files = VFS.GetFileList(dir)
        if files: for fn in files: if fn.endsWith(".fal"): list.push( [fn, dir] )
    end

    // -- static function --
    function LoadFromList(files)
        done_count = 0
        collect_errors = false
        errors = [ => ]
        loop
            startlen = files.len()
            // > "LoadScriptsFromList starting with " + startlen + " scripts"
            for fn, path in files
                sc = path + "/" + fn
                // > "Falcon:Init: Loading script '" + sc + "'"
                try
                    include_ex(fn, "", path) // will raise an error if loading failed (be it unresolved symbols or something else)
                    > "** Falcon script '" + sc + "' loaded"
                    done_count++
                    continue dropping // when we reached this point loading the file was sucessful, remove it from the list
                catch in err
                    if(collect_errors)
                        errors[sc] = err
                    else
                        //> "... failed, trying next one"
                    end
                end
            end
            endlen = files.len()
            
            if(startlen == 0)
                if(done_count > 0)
                    > "All " + done_count + " scripts loaded successfully"
                end
                break
            elif(startlen == endlen) // no file could be loaded in this run, there are dependencies we cant resolve or just files with syntax error
                if(collect_errors)
                    // >  "Falcon: " + done_count + " out of " + (done_count + endlen) + " scripts loaded."
                    > "Unable to load all scripts. Files:"
                    for sc, err in errors
                        > "[ " + sc + " ]"
                    end
                    > ""
                    > "----= Errors =----------------------------------------"
                    for sc, err in errors
                        > err
                        > ""
                    end
                    break           
                else
                    collect_errors = true
                    // > "LoadScriptsFromList -- error collect in next loop"
                end
                
            end
            // > "LoadScriptsFromList loop finished with " + endlen + " scripts")
        end
    end
    
    // -- static function --
    function LoadDir(dir)
        if not dir: raise "ScriptLoader::LoadDir() - directory is nil or empty string, oops!"
        
        list = List()
        self.FillList(list, "scripts/" + dir)
        
        self.LoadFromList(list)
    end
    
    // -- static function --
    function LoadFile(fn, dir)
        fullfn = "scripts/" + (dir ? dir + "/" : "") + fn
        if not VFS.HasFile(fullfn)
            > "ScriptLoader::LoadFile: '", fullfn, "' not found"
            DbgBreak()
            return false // not found
        end
        
        > "ScriptLoader::LoadFile: '", fullfn, "' ..."
        
        try
            if dir
                include_ex(fn, "", "scripts/" + dir)
                > "** Falcon script '" + dir + "/" + fn + "' loaded"
            else
                include_ex(fn, "", "scripts")
                > "** Falcon script '" + fn + "' loaded"
            end
            return true
        catch in err
            > "ScriptLoader::LoadFile('", fn, "', '", dir, "') failed:"
            > err
        end
        return false
    end
    
    // -- class method --
    function AddDir(dir)
        if dir
            self.FillList(self._list, "scripts/" + dir)
        else
            self.FillList(self._list, "scripts")
        end
    end 
    
    // -- class method --
    function AddFile(fn, dir)
        if dir
            self._list.push( [fn, "scripts/" + dir] )
        else
            self._list.push( [fn, "scripts"] )
        end
    end
    
    // -- class method --
    function DoLoad()
        self.LoadFromList(self._list)
    end
    
end


// --- initial load ---
ScriptLoader.LoadDir("system")

// after we are loaded, drop the init.fal loader script from the VFS,
// just to be on the safe side if someone reloads the scripts root dir, which would attempt to load this script again,
// which would cause major errors
VFS.AddBufAsFile("scripts/init.fal", ByteBuf().write("// cleared").toMemBuf())


// the scripts loaded until now will take care of the rest


export

